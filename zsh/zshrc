#
# Bens zshrc managed in dotfiles
#

aws-ssm-list() {
    aws ec2 describe-instances --query 'Reservations[*].Instances[*].Tags[?Key==`Name`].Value' --filters "Name=instance-state-name,Values=running" --output text
}

aws-logs-tail() {
    two_days_ago=$(date --date='-2 days' '+%s')
    two_days_ago_ms=$((two_days_ago * 1000))
    log_group=$( aws logs describe-log-groups --query 'logGroups[].logGroupName' --output text | sed "s/\t/\n/g" | fzf )
    log_stream=$( aws logs describe-log-streams --log-group-name $log_group --output text --query "logStreams[?lastEventTimestamp>\`$two_days_ago_ms\`].logStreamName" | fzf )

    echo "aws logs tail $log_group $log_stream"

}

aws-ssm-connect() {
    local name="$1"
    if [ -z "$name" ]; then
        name=$(ssm-list | fzf)
    fi
    target=$(echo $(aws ec2 describe-instances --filters "Name=tag:Name,Values=$name" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].InstanceId' --output text ) | awk '{print $name}' )
    aws ssm start-session --target $target
}

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

aws-sso-login() {
    aws sso login
    echo "Refreshing env cache"
    updateAWSLoginCache.py --config="$HOME/.aws/loginConfig.yaml" --force $$
}

aws-set-env() {
    # Check if exactly one argument is provided
    if [ "$#" -ne 1 ]; then
        echo "Usage: set_aws_profile_and_update <profile_name>"
        return 1
    fi

    # Set the AWS_PROFILE environment variable
    export AWS_PROFILE="$1"
    echo "AWS_PROFILE set to $AWS_PROFILE"

    # rm /tmp/aws_env_cache

    # echo "Updating env variables"
    # eval "$(aws configure export-credentials --format env)"
    # Run the updateAws command
    echo "Refreshing env cache"
    updateAWSLoginCache.py --config="$HOME/.aws/loginConfig.yaml" --force $$
}


get_aws_profile() {

    # updateAWSLoginCache.py --config="$HOME/.aws/loginConfig.yaml" $$ > /dev/null 2>&1 &

    # Check if the file exists
    if [[ -f "/tmp/aws_current_env_$$" ]]; then
        # Read the file's content
        echo "aws:$(cat /tmp/aws_current_env_$$)"
    else
        # Return 'ERROR' if the file does not exist
        echo "aws:refreshing..." 
        updateAWSLoginCache.py --config="$HOME/.aws/loginConfig.yaml" $$ > /dev/null 2>&1 &
    fi

}

setopt PROMPT_SUBST
PROMPT='$(get_aws_profile) %9c%{%F{green}%}$(parse_git_branch)%{%F{none}%} $ '


# PROMPT='%9c%{%F{green}%}$(parse_git_branch)%{%F{none}%} $ '
